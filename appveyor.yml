# shallow clone
clone_depth: 10

# don't build on tag
skip_tags: true

deploy:
  - provider: GitHub
    release: nightly-$(appveyor_build_number)
    description: |
      If you are unsure what to download, download the latest citra-mingw-amd64 zip, extract it and run citra-qt.exe

      Nightly Build number $(appveyor_build_number)
    auth_token:
      secure: MeBSKRVxvUlkHpCbV+PhpGMmvM2Xh4gkjf4/gWvCtl1ix/VJQPbs7L/PNU7IS66C
    artifact: mingwbuild,msvcbuild
    draft: false
    prerelease: false
    on:
      branch: master
      # travis only releases on tag? so have appveyor make the tag and let travis upload to it
      appveyor_repo_tag: true

environment:
  matrix:
    - BUILD_TYPE: mingw
    - BUILD_TYPE: msvc
  # set msys to use the mingw64 shell by setting the MSYSTEM env var
  MSYSTEM: MINGW64
  MINGW_BUILD_DIR: $(APPVEYOR_BUILD_FOLDER)\mingwbuild
  BUILD_PASSWORD:
    secure: EXGNlWKJsCtbeImEJ5EP9qrxZ+EqUFfNy+CP61nDOMA=

cache:
  - C:\ProgramData\chocolatey\bin -> appveyor.yml
  - C:\ProgramData\chocolatey\lib -> appveyor.yml

os: Visual Studio 2015

platform:
  - x64

configuration:
  - Release

install:
  - git submodule update --init --recursive
  - ps: |
        if ($env:BUILD_TYPE -eq 'mingw') {
          # redirect err to null to prevent warnings from becoming errors
          # Install in two separate steps as a workaround for cyclical dependancies
          C:\msys64\usr\bin\bash -lc "pacman --noconfirm -S mingw64/mingw-w64-x86_64-freetype mingw64/mingw-w64-x86_64-fontconfig" 2> $null
          C:\msys64\usr\bin\bash -lc "pacman --noconfirm -S mingw64/mingw-w64-x86_64-cmake mingw64/mingw-w64-x86_64-qt5 mingw64/mingw-w64-x86_64-SDL2" 2> $null
        }

before_build:
  - mkdir %BUILD_TYPE%build
  - cd %BUILD_TYPE%build
  - ps: |
        if ($env:BUILD_TYPE -eq 'msvc') {
          cmake -G "Visual Studio 14 2015 Win64" -DCITRA_USE_BUNDLED_QT=1 -DCITRA_USE_BUNDLED_SDL2=1 ..
        } else {
          # make sure error output from the cmake command isn't interpreted as an error in powershell by redirecting stderr
          # -l starts the shell with mingw64, but in mingw64 user's home folder. So we cd to the build directory
          C:\msys64\usr\bin\bash -lc 'cd `cygpath -u $APPVEYOR_BUILD_FOLDER/mingwbuild` && cmake -G ''MSYS Makefiles'' -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=mingw32-make .. 2>&1'
        }
  - cd ..

build_script:
  - ps: |
        # Set a short commit environment variable to use in the artifacts defintion
        $SHORT_COMMIT = "$env:APPVEYOR_REPO_COMMIT".substring(0,8)
        $env:SHORT_COMMIT = $SHORT_COMMIT
        $BUILD_NAME = "citra-$env:BUILD_TYPE-amd64-$SHORT_COMMIT.zip"

        if ($env:BUILD_TYPE -eq 'msvc') {
          # https://www.appveyor.com/docs/build-phase
          msbuild msvcbuild/citra.sln /maxcpucount /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
          7z a -tzip $BUILD_NAME .\msvcbuild\bin\release\* .\license.txt .\README.md
        } else {
          C:\msys64\usr\bin\bash -lc 'cd `cygpath -u $APPVEYOR_BUILD_FOLDER/mingwbuild` && mingw32-make -j2 2>&1'
          # Package a zip for mingw build.
          $CMAKE_SOURCE_DIR = "$env:APPVEYOR_BUILD_FOLDER"
          $CMAKE_BINARY_DIR = "$CMAKE_SOURCE_DIR/mingwbuild"
          $SQUIRREL_DIR = "$CMAKE_BINARY_DIR/squirrel.win"
          $SQUIRREL_RELEASE_DIR = "$SQUIRREL_DIR/Release"
          $SQUIRREL_BUILD_DIR = "$SQUIRREL_DIR/Build"
          $SQUIRREL_BIN_DIR = "$SQUIRREL_BUILD_DIR/lib/net45"

          # make the path we'll copy the output to post build
          New-Item -ItemType Directory -Force -Path $SQUIRREL_BIN_DIR | Out-Null
          New-Item -ItemType Directory -Force -Path $SQUIRREL_BUILD_DIR | Out-Null
          New-Item -ItemType Directory -Force -Path $SQUIRREL_RELEASE_DIR | Out-Null

          # First copy the citra exe files and all the dlls to the new release folder
          Get-ChildItem "$CMAKE_BINARY_DIR" -Recurse -Filter "citra*.exe" | Copy-Item -destination $SQUIRREL_BIN_DIR
          $MingwDLLs = "Qt5Core.dll","Qt5Widgets.dll","Qt5Gui.dll","Qt5OpenGL.dll","libbz2-1.dll","libicudt56.dll","libicuin56.dll","libicuuc56.dll","libffi-6.dll","libfreetype-6.dll","libgcc_s_seh-1.dll","libglib-2.0-0.dll","libgobject-2.0-0.dll","libgraphite2.dll","libiconv-2.dll","libharfbuzz-0.dll","libintl-8.dll","libpcre-1.dll","libpcre16-0.dll","libpng16-16.dll","libstdc++-6.dll","libwinpthread-1.dll","SDL2.dll","zlib1.dll"
          foreach ($file in $MingwDLLs) {
            Copy-Item -path "C:/msys64/mingw64/bin/$file" -force -destination "$SQUIRREL_BIN_DIR"
          }
          New-Item -ItemType Directory -Force -Path "$SQUIRREL_BIN_DIR/platforms" | Out-Null
          Copy-Item -path "C:/msys64/mingw64/share/qt5/plugins/platforms/qwindows.dll" -force -destination "$SQUIRREL_BIN_DIR/platforms"
          Copy-Item -path "$CMAKE_SOURCE_DIR/license.txt" -destination "$SQUIRREL_BIN_DIR"
          Copy-Item -path "$CMAKE_SOURCE_DIR/README.md" -destination "$SQUIRREL_BIN_DIR"
          7z a -tzip $BUILD_NAME "$SQUIRREL_BIN_DIR/*"
        }

test_script:
  - cd build && ctest -VV -C Release && cd ..

on_success:
    # copying the needed QT Dlls is now done post build. See the CMakeLists.txt file in the citra-qt folder
  - ps: >
        if (!"$env:APPVEYOR_PULL_REQUEST_TITLE" -and ("$env:APPVEYOR_REPO_BRANCH" -eq "master"))
          {
            $GITDATE = $(git show -s --date=short --format='%ad') -replace "-",""
            $GITREV = $(git show -s --format='%h')
            # Where are these spaces coming from? Regardless, let's remove them
            $BUILD_NAME = "citra-${GITDATE}-${GITREV}-windows-amd64.7z" -replace " ",""
            $BUILD_NAME_PDB = "citra-${GITDATE}-${GITREV}-windows-amd64-debugsymbols.7z" -replace " ",""
            $BUILD_NAME_NOQT = "citra-noqt-${GITDATE}-${GITREV}-windows-amd64.7z" -replace " ",""

            # Remove unnecessary files
            rm .\build\bin\release\*tests*

            # Put the pdb files in a separate archive and remove them from the main download
            7z a $BUILD_NAME_PDB .\build\bin\release\*.pdb
            rm .\build\bin\release\*.pdb

            # Zip up the build folder and documentation
            7z a $BUILD_NAME .\build\bin\release\* .\license.txt .\README.md
            # Do a second archive with only the binaries (excludes dlls) and documentation
            7z a $BUILD_NAME_NOQT .\build\bin\release\*.exe .\license.txt .\README.md


            # Download WinSCP and upload to server
            choco install winscp.portable
            WinSCP.exe /command `
                "option batch abort" `
                "option confirm off" `
                "open sftp://citra-builds:${env:BUILD_PASSWORD}@builds.citra-emu.org -hostkey=*" `
                "put $BUILD_NAME /citra/nightly/windows-amd64/" `
                "put $BUILD_NAME_NOQT /citra/nightly/windows-noqt-amd64/" `
                "put $BUILD_NAME_PDB /citra/nightly/windows-amd64-debugsymbols/" `
                "exit"
          }

artifacts:
  - path: citra-msvc-amd64-$(SHORT_COMMIT).zip
    name: msvcbuild
  - path: citra-mingw-amd64-$(SHORT_COMMIT).zip
    name: mingwbuild